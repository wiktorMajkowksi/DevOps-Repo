# -*- coding: utf-8 -*-
"""DevOps_Bot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/116pv7HlcQn9FksAInD8S68zJBy_vMTqD

### **Installing DEVOPS API and Establishing connection**
"""

pip install azure-devops

"""
Personal access token - it will expire after specific period of time it can be adjusted in:
                        User Settings/Personal Access Token
                        (ensure bot has full access)
"""
from azure.devops.connection import Connection
from msrest.authentication import BasicAuthentication
import pprint

# Fill in with your personal access token and org URL
personal_access_token = 'mbipsmtmhdmws74yyqo5xlfojzfgok7rwdp6uz5unrm7d3f33w6q'
organization_url = 'https://dev.azure.com/wiktormajkowski'

# Create a connection to the org
credentials = BasicAuthentication('', personal_access_token)
connection = Connection(base_url=organization_url, creds=credentials)

# Get a client (the "core" client provides access to projects, teams, etc)
core_client = connection.clients.get_core_client()

# Get the first page of projects
get_projects_response = core_client.get_projects()
index = 0
while get_projects_response is not None:
    for project in get_projects_response.value:
        pprint.pprint("[" + str(index) + "] " + project.name)
        index += 1
    if get_projects_response.continuation_token is not None and get_projects_response.continuation_token != "":
        # Get the next page of projects
        get_projects_response = core_client.get_projects(continuation_token=get_projects_response.continuation_token)
    else:
        # All projects have been retrieved
        get_projects_response = None

"""### **Post and Get requests to DevOps**

### **PROD**
"""

"""
Sending email to gmail based on the contents of the ticket
"""
import smtplib, ssl

url = 'https://dev.azure.com/wiktormajkowski/Test/_apis/wit/workitems/6?api-version=5.1'

read_item = requests.get(url, auth=(personal_access_token, AZURE_DEVOPS_PAT))

id = read_item.json()['id']
severity = read_item.json()['fields']['Microsoft.VSTS.Common.Severity']
est_resolution_date = read_item.json()['fields']['Custom.TargetResolutionDate']
subject_title = read_item.json()['fields']['System.Title']

port = 465  # For SSL
smtp_server = "smtp.gmail.com"
sender_email = "devtesting36@gmail.com"  # Enter your address
receiver_email = "devtesting36@gmail.com"  # Enter receiver address
password = "Testing123!"

message = """\
Subject: {}

Hello {}

Thanks for bringing the issue to our notice.

An incident has been logged with a reference # {}

Severity : {}

Estimated Resolution Date : {}


""".format(subject_title,"Client", id, severity, est_resolution_date)

context = ssl.create_default_context()
with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
    server.login(sender_email, password)
    server.sendmail(sender_email, receiver_email, message)

"""### **DEV**"""

import os
import requests

AZURE_DEVOPS_PAT = os.getenv('AZURE_DEVOPS_PAT')

"""
New item creation
"""

url = 'https://dev.azure.com/wiktormajkowski/Test/_apis/wit/workitems/$Pulse%20Service%20Request?api-version=5.1'

# url needs to be editied by specifying type of item which is being created.
#              Pulse%20Service%20Request == Pulse Service Request

data = [
 {
 "op": "add",
 "path": "/fields/System.Title",
 "value": "Data and Analytics"
 }
]

create_item = requests.post(url, json=data, 
    headers={'Content-Type': 'application/json-patch+json'},
    auth=(personal_access_token, AZURE_DEVOPS_PAT))

print(create_item.json())

"""
Reading item via the ID

prints the: description, steps, resolution
"""

url = 'https://dev.azure.com/wiktormajkowski/Test/_apis/wit/workitems/5?api-version=5.1'

# url needs to be editied by specifying ID which exists in the work items.
#              11 == Pulse Service Request

read_item = requests.get(url, auth=(personal_access_token, AZURE_DEVOPS_PAT))
#read_item.json()['fields'] = view all the elements
#System.Description = description
#Microsoft.VSTS.TCM.Steps = steps 
#Microsoft.VSTS.Common.Resolution = resolution 

id = read_item.json()['id']
description = read_item.json()['fields']['System.Description'].strip('</div>')
steps = read_item.json()['fields']['Microsoft.VSTS.TCM.Steps'].replace('</div>', "").replace('<div>',"\n- ")
resolution = read_item.json()['fields']['Microsoft.VSTS.Common.Resolution'].strip('</div>')

lista = [id,description,steps,resolution]
lista2 = ["This is the ID of the ticket: ", "This is the description: ", "Those are the steps taken: ", "This is the resolution: "]

for i in range(len(lista)):
  print(lista2[i], lista[i])

"""
This will generate a replay once the ticket is created
"""

id = read_item.json()['id']
severity = read_item.json()['fields']['Microsoft.VSTS.Common.Severity']
est_resolution_date = read_item.json()['fields']['Custom.TargetResolutionDate']
subject_title = read_item.json()['fields']['System.Title']

"""
Change the settings
my google account > security > less secure apps access > OFF
"""
import smtplib, ssl

port = 465  # For SSL
smtp_server = "smtp.gmail.com"
sender_email = "devtesting36@gmail.com"  # Enter your address
receiver_email = "devtesting36@gmail.com"  # Enter receiver address
password = "Testing123!"

message = """\
Subject: {}

Hello {}

Thanks for bringing the issue to our notice.

An incident has been logged with a reference # {}

Severity : {}

Estimated Resolution Date : {}


""".format(subject_title,"Client", id, severity, est_resolution_date)

context = ssl.create_default_context()
with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
    server.login(sender_email, password)
    server.sendmail(sender_email, receiver_email, message)